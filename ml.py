# -*- coding: utf-8 -*-
"""GroupProject_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dVP9kmdUcSguCuAs_r8BgiGeMQpOG5CY
"""



"""# Language Translation Tool - Introduction
## Project Objective:
The main objective of our Language Translation Tool is to enable seamless communication across several languages by delivering a dependable and effective text-based translation service. The tool seeks to help users, ranging from students and travellers to professionals and worldwide enterprises, overcome language hurdles that prevent comprehension and collaboration.

## Project Scope:
Our project will focus on creating a digital prototype that can translate text between English and Spanish. These languages were chosen for their broad use and high demand in educational, professional, and personal settings. The prototype will be built to handle common phrases, sentences, and potentially paragraphs, providing accurate and context-appropriate translations.

## Specific Requirements:

### Functional Requirements:
- The tool should have a simple user interface that allows users to enter text in English or German and obtain translations in the other language.

- The translation process should be swift, with results available within a few seconds of submission.
- Wherever possible, the tool should properly translate idiomatic idioms and slang to preserve the original meaning and tone.
- Users should be able to examine both the original text and its translation concurrently for comparison reasons.

### Technical Requirements:
- The tool will be created in Python, with Google Colab serving as the primary development and testing platform.
- We will use the Natural Language Toolkit (NLTK) to handle language data, and we may incorporate additional APIs or pre-trained models for translation mechanics, depending on practicality and accuracy requirements.
- The prototype should be scalable, allowing for the incorporation of other languages or more complicated linguistic structures in future versions.

### User Requirements:
- The interface should be user-friendly, needing little technical expertise or involvement to conduct translations.
- Clear font sizes, understandable colour choices, and simple navigation should all be considered when designing for accessibility.
- To assist first-time users, the system should have basic instructions or help documentation that is easily available inside the interface.

## Anticipated Challenges:
- Ensuring translation correctness, particularly for complicated phrases or colloquial language, may be difficult and may need considerable testing and iterative feedback.
- Scalability to incorporate more languages or dialects may offer new technological challenges that must be addressed later in the development cycle.

Program: English-German Translation Tool
Author: Saleh and
Last Modified by: Saleh
Date Last Modified: 2024-04-19
Description: This program loads a dataset containing English and German sentence pairs,
             and allows the user to input an English sentence and receive a German translation
             based on exact match from the dataset.
Revision History:
    2024-04-17: Initial creation.
    2024-04-19: Added user interface and styling.
"""

##- Data Loading and Preprocessing Module

"""
Program: Data Loading and Preprocessing for English-German Translation Tool
Author: Saleh
Last Modified by: Saleh
Date Last Modified: 2024-04-19
Description: This module loads and preprocesses the English-German sentence pairs from a TSV file.
             It performs operations such as lowering case, stripping whitespaces, and tokenizing sentences.
Revision History:
    2024-04-17: Initial creation.
    2024-04-19: Added tokenization and saved processed data.
"""




## Environment Setup

## Python libraries Import

import pandas as pd
import nltk
from sklearn.model_selection import train_test_split

# Download the NLTK tokenizer (split the sentences into words, making them ready for further processing.)
nltk.download('punkt')

# Load the dataset from the file system
data = pd.read_csv('/content/sample_data/Sentence pairs in English-German - 2024-04-19.tsv',
                   sep='\t',
                   header=None,
                   names=['English_ID', 'English', 'German_ID', 'German'])

# Display the first few rows to verify the content
print(data.head())

# Since we don't need the sentence IDs, we can drop those columns
data = data.drop(['English_ID', 'German_ID'], axis=1)

# Data cleaning and preprocessing
# Remove quotes and strip whitespaces
data['English'] = data['English'].str.strip().str.replace('"', '')
data['German'] = data['German'].str.strip().str.replace('"', '')

# Convert text to lowercase for normalization
data['English'] = data['English'].str.lower()
data['German'] = data['German'].str.lower()

# Tokenize sentences using NLTK to split sentences into words
data['English_tokens'] = data['English'].apply(nltk.word_tokenize)
data['German_tokens'] = data['German'].apply(nltk.word_tokenize)

# Split the data into training and testing sets (80% training, 20% testing)
train_data, test_data = train_test_split(data, test_size=0.2)

# Save the processed training and testing data into CSV files for later use
train_data.to_csv('/content/sample_data/train_data.csv', index=False)
test_data.to_csv('/content/sample_data/test_data.csv', index=False)

# Display the first few rows of the training data to verify
train_data.head()

"""
Program: User Interface for English-German Translation Tool
Author: Saleh
Last Modified by: Saleh
Date Last Modified: 2024-04-19
Description: This module sets up the user interface for the translation tool, including text input,
             a translation button, and an output area. It utilizes the find_translation function to
             provide translations based on user input.
Revision History:
    2024-04-19: Created the user interface and linked it to the translation function.
"""

import pandas as pd
import ipywidgets as widgets
from IPython.display import display

# Load the dataset from a TSV file
sentence_pairs = pd.read_csv('/content/sample_data/Sentence pairs in English-German - 2024-04-19.tsv', sep='\t', header=None)
sentence_pairs.columns = ['ID1', 'English', 'ID2', 'German']

# Preprocess the text by lowering case and stripping whitespaces
sentence_pairs['English'] = sentence_pairs['English'].str.lower().str.strip()
sentence_pairs['German'] = sentence_pairs['German'].str.lower().str.strip()

def find_translation(input_sentence, df):
    """
    Search for an exact match of the input sentence in the dataset and return the German translation.

    Parameters:
    input_sentence (str): The English sentence to translate.
    df (DataFrame): The pandas DataFrame containing English and German sentence pairs.

    Returns:
    str: The translated German sentence if an exact match is found; otherwise, a not-found message.
    """
    # Normalize the input sentence for matching
    input_sentence = input_sentence.lower().strip()
    match = df[df['English'] == input_sentence]['German']
    if not match.empty:
        return match.iloc[0]
    else:
        return "No exact match found."

# User interface setup with added styling
input_text = widgets.Text(value='', placeholder='Type something in English', description='Input:', disabled=False)
input_text.layout.width = '400px'  # Set the width of the input text box

translate_button = widgets.Button(description='Translate', disabled=False, button_style='info', tooltip='Click to translate', icon='language')
translate_button.style.button_color = 'lightblue'  # Set the button color

output = widgets.Output()
output.layout.border = '1px solid black'  # Add a border to the output display area

def on_translate_button_clicked(translate_button):
    """
    Handles the button click event. Uses the find_translation function to get the translation of the user's input,
    then displays the input and its translation in the output widget.
    """
    translation = find_translation(input_text.value, sentence_pairs)
    with output:
        output.clear_output()  # Ensures that the output area is clear before displaying new results
        print(f"Input: {input_text.value}")  # Echo the original user input for comparison
        print(f"Translation: {translation}")  # Show the translated output or a not-found message

# Connect the button click event to its action
translate_button.on_click(on_translate_button_clicked)

# Display the text input, button, and output widgets
display(input_text, translate_button, output)

